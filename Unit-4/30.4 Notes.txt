Finding Bridges in Connected Graph:
// ...existing code...
Concept:
- A bridge (or cut‑edge) in a connected undirected graph is an edge whose removal increases the number of connected components.

Algorithm (Tarjan’s Bridge‑Finding):
1. Maintain for each vertex u:
   • disc[u]: discovery time during DFS  
   • low[u]: lowest discovery time reachable from u (including back‑edges)  
   • parent[u]: parent of u in DFS tree  
   • visited[u]: whether u is visited  
2. Initialize all arrays; time = 0; parent[u] = -1 for all u.  
3. For each vertex u (0…V‑1), if not visited[u], call DFS(u).

DFS(u):
   visited[u] = true  
   disc[u] = low[u] = ++time  
   for each v in adj[u]:
     if not visited[v]:
       parent[v] = u  
       DFS(v)  
       low[u] = min(low[u], low[v])  
       if (low[v] > disc[u]):
         (u, v) is a bridge  
     else if (v != parent[u]):
       low[u] = min(low[u], disc[v])  

Finding Bridges in Connected Graph:
// ...existing code...
Concept:
- A bridge (or cut‑edge) in a connected undirected graph is an edge whose removal increases the number of connected components.

Algorithm (Tarjan’s Bridge‑Finding):
1. Maintain for each vertex u:
   • disc[u]: discovery time during DFS  
   • low[u]: lowest discovery time reachable from u (including back‑edges)  
   • parent[u]: parent of u in DFS tree  
   • visited[u]: whether u is visited  
2. Initialize all arrays; time = 0; parent[u] = -1 for all u.  
3. For each vertex u (0…V‑1), if not visited[u], call DFS(u).

DFS(u):
   visited[u] = true  
   disc[u] = low[u] = ++time  
   for each v in adj[u]:
     if not visited[v]:
       parent[v] = u  
       DFS(v)  
       low[u] = min(low[u], low[v])  
       if (low[v] > disc[u]):
         (u, v) is a bridge  
     else if (v != parent[u]):
       low[u] = min(low[u], disc[v])  

// Detailed Explanation:
// 1. discovery time (disc):
//    - Assigns each node a unique timestamp when first visited.
// 2. low value (low):
//    - For node u, low[u] = min{ disc[u], disc[w] for any w reachable by a back‑edge from u or its descendants }.
// 3. Why low[v] > disc[u] detects a bridge:
//    - If v (and its subtree) cannot reach u or any ancestor of u via back‑edges, removing edge (u,v) disconnects v’s subtree.
// 4. Back‑edges vs Tree‑edges:
//    - Tree‑edges form the DFS forest, back‑edges connect a node to an ancestor and allow updating low[] upwards.
// 5. Parent array:
//    - Ensures we ignore the trivial back‑edge to our immediate parent in undirected graph.

— Example Graph —
//    0
//   / \
//  1   3
//  | \
//  2  4
//
// Edges: (0,1), (0,3), (1,2), (1,4), (0,4)
//
// DFS order (disc):
//   disc[0]=1, disc[1]=2, disc[2]=3, disc[4]=4, disc[3]=5
// low values propagate via back‑edges: (4→0) updates low[4]=1, low[1]=1
// Bridge edges are those where low[child] > disc[parent]:
//   (0,3) disc[0]=1, low[3]=5 → bridge
//   (1,2) disc[1]=2, low[2]=3 → bridge

Problem Statement:
// Given a connected undirected graph G(V, E), list all edges whose removal increases
// the number of connected components (i.e., all bridges).

Java Implementation Example:
```java
import java.util.*;

public class FindBridges {
    private int V, time = 0;
    private List<List<Integer>> adj;

    public FindBridges(int V) {
        this.V = V;
        adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
    }

    public void addEdge(int u, int v) {
        adj.get(u).add(v);
        adj.get(v).add(u);
    }

    private void bridgeUtil(int u, boolean[] visited, int[] disc, int[] low, int[] parent) {
        visited[u] = true;
        disc[u] = low[u] = ++time;
        for (int v : adj.get(u)) {
            if (!visited[v]) {
                parent[v] = u;
                bridgeUtil(v, visited, disc, low, parent);
                low[u] = Math.min(low[u], low[v]);
                if (low[v] > disc[u]) {
                    System.out.println(u + " - " + v + " is a bridge");
                }
            } else if (v != parent[u]) {
                low[u] = Math.min(low[u], disc[v]);
            }
        }
    }

    public void findBridges() {
        boolean[] visited = new boolean[V];
        int[] disc = new int[V], low = new int[V], parent = new int[V];
        Arrays.fill(parent, -1);
        for (int i = 0; i < V; i++) {
            if (!visited[i])
                bridgeUtil(i, visited, disc, low, parent);
        }
    }

    public static void main(String[] args) {
        FindBridges g = new FindBridges(5);
        g.addEdge(1, 0); g.addEdge(0, 2); g.addEdge(2, 1);
        g.addEdge(0, 3); g.addEdge(3, 4);
        System.out.println("Bridges in the graph:");
        g.findBridges();
    }
}