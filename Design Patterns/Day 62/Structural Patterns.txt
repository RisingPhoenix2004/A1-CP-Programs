Structural Patterns 

Composition / Containment (has a relationship) : One class has objects of other class ?

Proxy pattern : 

Proxy server : Another server acts as a middle server which  handles the requests and sends the response back to the requested host
-> load balancing (caching) , privacy , security 


Proxy Pattern provides the polymorphic behaviour to the client ?

Class functioning as an interface to something else 

something else -> a network connection , large object in memory , a file etc , that is expensive or impossible to duplicate 

A proxy is a wrapper  / agent object that is being called by the client to access the real serving object behind the scenes

Example : 

Dynamic Link Library  ,  a file that contains code/resources which can be reused , a component container 
-> in process server , where ever the program loads , the dll runs there


A desktop has an app which has 3 components , a product , shipment and credit card component 

is it an exe or dll ? if exe , running on local / remote machine?
-> A client server shouldn't be bothered with these sort of things 

Say , the product catalogue is a dll , Cred card is exe on local server , shipment is a remote system exe 

A dll is loaded on the same address space as the application -> product catalogue
A local exe is different process entirely running on the system-> credit card
A remote exe is process running on a remote server -> Shipment 


A proxy server is used to connect the remote exe & the local exe ( dll isn't required , cause its already on the local address space )

It has the same interface as the remote object (exe) , and now we can call the proxy , replacing the remote call ( it has the same interface as the remote exe ) 

A proxy itself is a dll on the space where the application is running


 The client (main app) doesn’t care whether it’s calling a DLL, local EXE, or remote EXE — thanks to the Proxy Pattern.

This is the essence of abstraction + polymorphism — it allows us to design scalable, modular systems without coupling to the deployment or communication details



Before JAVA : 

they used to use ODBC -> open DB connectivity. Where each of the DB used to understand ODBC. 

ODBC is like a proxy layer between language and the DB 

ODBC is a DLL , C specific , which is Microsoft specific -> Platform dependent 


After JAVA :

Java does not have / understand ODBC , because it makes it platform specific 

So java created a layer called JDBC-ODBC Bridge , where 

Client talks to java -> this jdbc driver talks to odbc which -> talks to the DB




This was an extra proxy layer ?




Protection Proxy

Controls access based on permissions or roles.














