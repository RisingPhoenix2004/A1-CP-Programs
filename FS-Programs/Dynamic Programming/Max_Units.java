/*
 * You are the lead engineer in a high-tech robot factory with 'n production units', 
each assigned a number from 0 to n - 1. Every unit contains a specialized 'robot component', 
and the efficiency level of each component is represented by an array components, 
where components[i] is the efficiency level of the i-th component.

As part of the factory shutdown protocol, you need to deactivate all the units 
one by one. 
However, the deactivation process is tricky — when you shut down the i-th unit, 
it triggers a chain reaction with its neighboring units, generating:

> components[i - 1] * components[i] * components[i + 1] power units

If i - 1 or i + 1 falls outside the range of the array, assume there’s a dummy 
component with efficiency level 1 installed for safety compliance.

Your objective is to maximize the total power generated by planning the 
shutdown order strategically.

Sample Input-1:
---------------
2 1 3 5

Sample Output-1:
---------------
51

Explanation:
------------
Shutdown order:
[2,1,3,5] → [2,3,5] → [2,5] → [5] → []
Power generated:
2*1*3 + 2*3*5 + 1*2*5 + 1*5*1 = 51


Sample Input-2:
---------------
8 9

Sample Output-2:
---------------
81

Explanation:
Deactivate both units in any order: 1*8*9 + 1*9*1 = 81

Constraints:

-> n == components.length
-> 1 <= n <= 300
-> 0 <= components[i] <= 100

 */
import java.util.Scanner;
class Sol {
    public static void main(String... args) {
        Scanner sc = new Scanner(System.in);
        String[] ar = sc.nextLine().split(" ");
        int[] num = new int[ar.length];
        for (int i = 0; i < ar.length; i++) {
            num[i] = Integer.parseInt(ar[i]);
        }
        System.out.println(maxUnits(num, num.length));
    }
    private static int maxUnits(int[] num, int n) {
        int[] arr = new int[n + 2]; 
        arr[0] = 1;
        arr[n + 1] = 1;
        for (int i = 0; i < n; i++) {
            arr[i + 1] = num[i];
        }
        int[][] dp = new int[n + 2][n + 2];
        for (int len = 2; len <= n + 1; len++) {
            for (int left = 0; left <= n + 1 - len; left++) {
                int right = left + len;
                for (int i = left + 1; i < right; i++) {
                    int gain = arr[left] * arr[i] * arr[right];
                    int total = gain + dp[left][i] + dp[i][right];
                    dp[left][right] = Math.max(dp[left][right], total);
                }
            }
        }
        return dp[0][n + 1];
    }
}
